language: rust
dist: bionic

env:
  global:
    - HOST=x86_64-unknown-linux-gnu
    - RUSTFLAGS='-D warnings'

jobs:
  include:
    # Linux
    - env: TARGET=x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-musl
    - env: TARGET=i686-unknown-linux-gnu

    # OSX
    - env: TARGET=x86_64-apple-darwin
      os: osx

    # Windows
    - env: TARGET=x86_64-pc-windows-gnu
      os: windows
      before_install: ci/before_install.bat
    - env: TARGET=x86_64-pc-windows-msvc
      os: windows
      before_install: ci/before_install.bat
    - env: TARGET=i686-pc-windows-msvc
      os: windows
      before_install: ci/before_install.bat

    # Testing on the nightly channel
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
      allow_failures: true
    - env: TARGET=x86_64-apple-darwin
      os: osx
      rust: nightly
      allow_failures: true
    - env: TARGET=x86_64-pc-windows-gnu
      os: windows
      before_install: ci/before_install.bat
      rust: nightly
      allow_failures: true

    # Static checks
    - name: LoC and clippy
      before_script: rustup component add clippy
      install: skip
      script:
        - cargo test --test loc
        - cargo clippy --all-targets -- -D warnings
    - name: Rustfmt
      # Install the rustfmt component for the nightly channel
      # Sometimes, not all components are available in any given nightly, which causes errors such as
      # https://github.com/ilai-deutel/kibi/issues/24. Therefore, we use the `--allow-downgrade` flag to downgrade
      # the version if rustfmt is not available for this or any newer nightly.
      # In the future, `rustup component add` will have a `--allow-downgrade` flag
      # (see https://github.com/rust-lang/rustup/issues/2146), but in the meantime we use this work-around:
      install: skip
      before_script: rustup toolchain install $TRAVIS_RUST_VERSION --allow-downgrade -c rustfmt
      script: cargo fmt -- --check
      rust: nightly
    - name: Dependency Audit
      install: cargo install cargo-audit
      script: cargo audit
      cache: cargo

  fast_finish: true

before_install: ci/before_install.sh

cache: false

install: |
  cargo build --target "${TARGET:-$HOST}" --verbose
  cargo run -- --version

script: skip

before_deploy: ci/before_deploy.sh

deploy:
  provider: releases
  api_key:
    secure: Va5HQGJoUwfnsxN8L1zI2RkSt1s0az7v7/NHxQMTv8SffaDOJuhbeWXsr9vFHNIE8wUC2mkLOd6rAGZ9YCtRUKS4nAucPk0gUD083y34j1DMLh6ycMjFtuWdWCaUMHaVqZjXPMCdeL7xZ6SuWqjhBDcOhDW3c63/caCSY6BlLQ2EFfT/GRscO2AzrRW0emHU3S8d9BgTX3YxSvJJnBZaUdLEbHQdLw/6m30MgaUwnPodxjRqzxNSJ+yReDJqwYvLCYCdYvNLlhA5MXM4GfgOsIWFdS1nMUyVKjpDf80f/BRUSLPst9uZ/6EBnFsUOTF7Vfw6FgNknNaqk7dHatIy5bWjjB6z8SPZAwzfnYCFNpFu6567/9i0PUxWd0g8L1lRGf0P+Y2rMJmV2LWpL4zjb7lDUHf9Hbg3ueY/yLguhi/ic7U2+ok2S4OCH+uDs1uSsekpyxYhqHL4zcFxtUTi1zasRI1NEVJr9CcAVoR4p/83N6rX5/0xR7pdhCfDGTlBQQH0AjHU/q8GhVw2mVlyQqefNBszjHrG9tI1oWcRmSruWMG7HX4m3BAci2T1/MlJSmUiwQ27eaBHLw6fROvkH2RD3kowRsM3oCRN6OQLf/HD5OnLfqKhGEaYlAfzpf9O6tQZSCHbIST4rhLYdCkGofNiPjSa3tErmoxWFNhm57E=
  file: kibi-$TRAVIS_TAG-$TARGET.tar.gz
  skip_cleanup: true
  draft: true
  on:
    tags: true
    condition: $TRAVIS_RUST_VERSION = stable && -n "$TARGET"

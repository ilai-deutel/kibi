name: release

on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  verify:
    name: Verify version
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
      - name: Check that tag version and Cargo.toml version are the same
        run: |
          CRATE_VERSION=$(cargo pkgid | cut -d '#' -f2)
          if [[ ${{ github.ref_name }} != "v$CRATE_VERSION" ]]; then
            echo "Tag ${{ github.ref_name }} does not match crate version $CRATE_VERSION" >&2
            exit 1
          fi
  build:
    name: Build
    needs:
      - verify
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix: &MATRIX
        target:
          # Tier 1 platforms
          - aarch64-apple-darwin        # ARM64 macOS (11.0+, Big Sur+)
          - aarch64-pc-windows-msvc     # ARM64 Windows MSVC
          - aarch64-unknown-linux-gnu   # ARM64 Linux (kernel 4.1+, glibc 2.17+)
          - i686-pc-windows-msvc        # 32-bit MSVC (Windows 10+, Windows Server 2016+, Pentium 4) 1 2
          - i686-unknown-linux-gnu      # 32-bit Linux (kernel 3.2+, glibc 2.17+, Pentium 4) 1
          - x86_64-pc-windows-gnu       # 64-bit MinGW (Windows 10+, Windows Server 2016+)
          - x86_64-pc-windows-msvc      # 64-bit MSVC (Windows 10+, Windows Server 2016+)
          - x86_64-unknown-linux-gnu    # 64-bit Linux (kernel 3.2+, glibc 2.17+)
          # Tier 2 platforms
          - aarch64-linux-android       # ARM64 Android
          - aarch64-unknown-linux-musl  # ARM64 Linux with musl 1.2.3
          - x86_64-unknown-linux-musl   # 64-bit Linux with musl 1.2.3
          - x86_64-apple-darwin         # 64-bit macOS (10.12+, Sierra+)
          - wasm32-wasip1               # WebAssembly with WASIp1
        include:
          # Runner image configuration. Defaults to ubuntu-latest.

          # MacOS
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest

          # Windows, x86
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

          # Windows, ARM64
          - target: aarch64-pc-windows-msvc
            os: windows-11-arm

          # Linux, ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
          - target: aarch64-unknown-linux-musl
            os: ubuntu-24.04-arm
    outputs:
      hash-aarch64-apple-darwin: ${{ steps.hash-macos.outputs.hash-aarch64-apple-darwin}}
      hash-aarch64-linux-android: ${{ steps.hash.outputs.hash-aarch64-linux-android}}
      hash-aarch64-pc-windows-msvc: ${{ steps.hash.outputs.hash-aarch64-pc-windows-msvc}}
      hash-aarch64-unknown-linux-gnu: ${{ steps.hash.outputs.hash-aarch64-unknown-linux-gnu}}
      hash-aarch64-unknown-linux-musl: ${{ steps.hash.outputs.hash-aarch64-unknown-linux-musl}}
      hash-i686-pc-windows-msvc: ${{ steps.hash.outputs.hash-i686-pc-windows-msvc}}
      hash-i686-unknown-linux-gnu: ${{ steps.hash.outputs.hash-i686-unknown-linux-gnu}}
      hash-x86_64-pc-windows-gnu: ${{ steps.hash.outputs.hash-x86_64-pc-windows-gnu}}
      hash-x86_64-pc-windows-msvc: ${{ steps.hash.outputs.hash-x86_64-pc-windows-msvc}}
      hash-x86_64-unknown-linux-gnu: ${{ steps.hash.outputs.hash-x86_64-unknown-linux-gnu}}
      hash-x86_64-unknown-linux-musl: ${{ steps.hash.outputs.hash-x86_64-unknown-linux-musl}}
      hash-x86_64-apple-darwin: ${{ steps.hash-macos.outputs.hash-x86_64-apple-darwin}}
      hash-wasm32-wasip1: ${{ steps.hash.outputs.hash-wasm32-wasip1}}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - name: Auto-convert CRLF line endings
        run: git config --global core.autocrlf input
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
      - name: Setup cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1
        with:
          prefix-key: rust-stable
          # Android-only
          cache-directories: ~/ndk

      - name: Install upx (Linux)
        if: ((matrix.os == '') || startsWith(matrix.os, 'ubuntu-')) && matrix.target != 'wasm32-wasip1'
        run: |
          sudo apt-get update
          sudo apt-get install upx-ucl
      - name: Install gcc-multilib (Linux i686)
        if: (matrix.os == '') && startsWith(matrix.target, 'i686-')
        run: |
          sudo apt-get install gcc-multilib
      - name: Install upx (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install upx
      - name: Install dependencies (Android)
        if: matrix.target == 'aarch64-linux-android'
        run: |
          if [[ ! -d ~/ndk ]]; then
              mkdir ~/android
              ci/install_android_ndk.sh ~/ndk
          fi
          TOOLCHAIN="$HOME/ndk/toolchains/llvm/prebuilt/linux-x86_64"
          ANDROID_API_LEVEL=$(jq .max ~/ndk/meta/platforms.json)
          echo "$TOOLCHAIN/bin" >> "$GITHUB_PATH"
          TARGET_UPPERCASE=$(sed -e 's/.*/\U&/' -e 's/-/_/g' <<< ${{ matrix.target }})
          echo "CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=${TOOLCHAIN}/bin/${{ matrix.target }}${ANDROID_API_LEVEL}-clang" >> "$GITHUB_ENV"
      - name: Install Rust stable toolchain
        run: |
          rustup toolchain install stable --target ${{ matrix.target }} --profile minimal
          rustup default stable
          rustc +stable --version --verbose
  
      - name:  Build binary
        run: cargo build --target ${{ matrix.target }} --release --verbose
        env:
          RUSTFLAGS: -D warnings
      - name: Set binary path variable (Linux, MacOS)
        if: "! contains(matrix.target, 'windows') && matrix.target != 'wasm32-wasip1'"
        run: echo "BINARY_PATH=target/${{ matrix.target }}/release/kibi" >> "$GITHUB_ENV"
      - name: Set binary path variable (Windows)
        if: contains(matrix.target, 'windows')
        run: echo "BINARY_PATH=target/${{ matrix.target }}/release/kibi.exe" >> "$GITHUB_ENV"
      - name: Set binary path variable (WASI)
        if: matrix.target == 'wasm32-wasip1'
        run: echo "BINARY_PATH=target/${{ matrix.target }}/release/kibi.wasm" >> "$GITHUB_ENV"

      - name: Compress the binary (Linux, Windows x86)
        # MacOS support: https://github.com/upx/upx/issues/612
        # Windows ARM64 support: https://github.com/upx/upx/issues/650
        # WASI support (won't fix): https://github.com/upx/upx/issues/290
        if: (matrix.os == '' && matrix.target != 'wasm32-wasip1') || startsWith(matrix.os, 'ubuntu-') || matrix.os == 'windows-latest'
        run: upx --best --lzma "$BINARY_PATH"

      - name: Create package directory
        run: |
          ARCHIVE_DIR="$(mktemp --directory)"
          cp -R \
            "$BINARY_PATH" \
            CHANGELOG.md \
            COPYRIGHT \
            LICENSE-APACHE \
            LICENSE-MIT \
            README.md \
            config_example.ini \
            syntax.d \
            "$ARCHIVE_DIR"
          echo "ARCHIVE_DIR=$ARCHIVE_DIR" >> "$GITHUB_ENV"
      - name: Create release asset (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          ASSET_PATH="kibi-${{ github.ref_name }}-${{ matrix.target }}.tar.gz"
          tar czvf "$ASSET_PATH" -C "$ARCHIVE_DIR" .
          echo "ASSET_PATH=$ASSET_PATH" >> "$GITHUB_ENV"
      - name: Create release asset (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ASSET_PATH="kibi-${{ github.ref_name }}-${{ matrix.target }}.zip"
          7z a "$ASSET_PATH" "$ARCHIVE_DIR"
          echo "ASSET_PATH=$ASSET_PATH" >> "$GITHUB_ENV"
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: ${{ env.ASSET_PATH }}
          path: ${{ env.ASSET_PATH }}
          if-no-files-found: error
      - name: Generate subject (Linux, Windows)
        if: matrix.os != 'macos-latest'
        id: hash
        run: |
          HASH=$(sha256sum -t "$ASSET_PATH" | base64 -w0)
          echo "hash-${{ matrix.target }}=$HASH" >> "${GITHUB_OUTPUT}"
      - name: Generate subject (MacOS)
        if: matrix.os == 'macos-latest'
        id: hash-macos
        run: |
          HASH=$(sha256sum -t "$ASSET_PATH" | base64)
          echo "hash-${{ matrix.target }}=$HASH" >> "${GITHUB_OUTPUT}"

  provenance:
    name: Generate provenance information
    needs:
      - build
    permissions:
      actions: read
      id-token: write
      contents: write
    strategy:
      fail-fast: false
      matrix: *MATRIX
    # Can't use commit hash: https://github.com/slsa-framework/slsa-verifier/issues/12
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: "${{ needs.build.outputs[format('hash-{0}', matrix.target)] }}"
      upload-assets: false

  create-release:
    name: Create draft release
    needs:
      - provenance
    permissions:
      actions: read
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
      - name: Download artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          path: /tmp/artifacts
          merge-multiple: true
      - name: Create release
        run: |
          gh release create ${{ github.ref_name }} \
            --title ${{ github.ref_name }} \
            --draft \
            --verify-tag \
            --fail-on-no-commits \
            /tmp/artifacts/*
        env:
          GH_TOKEN: ${{ github.token }}

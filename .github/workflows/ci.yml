name: CI

on:
  push:
    branches:
      - "master"
    paths:
      - ".github/workflows/ci.yml"
      - "**.rs"
      - "*cargo/config.toml"
      - "*Cargo.toml"
      - "*Cargo.lock"
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  build_and_test:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - "1.85" # MSRV
          - nightly
        target:
          # Tier 1 platforms
          - aarch64-apple-darwin        # ARM64 macOS (11.0+, Big Sur+)
          - aarch64-pc-windows-msvc     # ARM64 Windows MSVC
          - aarch64-unknown-linux-gnu   # ARM64 Linux (kernel 4.1+, glibc 2.17+)
          - i686-pc-windows-msvc        # 32-bit MSVC (Windows 10+, Windows Server 2016+, Pentium 4) 1 2
          - i686-unknown-linux-gnu      # 32-bit Linux (kernel 3.2+, glibc 2.17+, Pentium 4) 1
          - x86_64-pc-windows-gnu       # 64-bit MinGW (Windows 10+, Windows Server 2016+)
          - x86_64-pc-windows-msvc      # 64-bit MSVC (Windows 10+, Windows Server 2016+)
          - x86_64-unknown-linux-gnu    # 64-bit Linux (kernel 3.2+, glibc 2.17+)
          # Tier 2 platforms
          - aarch64-linux-android       # ARM64 Android
          - aarch64-unknown-linux-musl  # ARM64 Linux with musl 1.2.3
          - x86_64-unknown-linux-musl   # 64-bit Linux with musl 1.2.3
          - x86_64-apple-darwin         # 64-bit macOS (10.12+, Sierra+)
          - wasm32-wasip1               # WebAssembly with WASIp1
        include:
          # Only run coverage on nightly toolchain
          - toolchain: stable
            disable-coverage: true
          - toolchain: "1.85"
            disable-coverage: true

          # Target-specific config
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: aarch64-pc-windows-msvc
            os: windows-11-arm
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-24.04-arm
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            disable-coverage: true # https://github.com/rust-lang/rust/issues/111098
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-linux-android
            os: ubuntu-latest
            disable-tests: true
            disable-coverage: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-24.04-arm
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: wasm32-wasip1
            os: ubuntu-latest
            disable-coverage: true

    runs-on: ${{ matrix.os }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false
      - name: Install gcc-multilib (i686)
        if: matrix.target == 'i686-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install gcc-multilib
      - name: Setup cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1
        with:
          prefix-key: rust-${{ matrix.toolchain }}
          # Android-only
          cache-directories: ~/ndk
      - name: Install dependencies (Android)
        if: matrix.target == 'aarch64-linux-android'
        run: |
          if [[ ! -d ~/ndk ]]; then
              ci/install_android_ndk.sh ~/ndk
          fi
          TOOLCHAIN="$HOME/ndk/toolchains/llvm/prebuilt/linux-x86_64"
          ANDROID_API_LEVEL=$(jq .max ~/ndk/meta/platforms.json)
          echo "$TOOLCHAIN/bin" >> "$GITHUB_PATH"
          TARGET_UPPERCASE=$(sed -e 's/.*/\U&/' -e 's/-/_/g' <<< ${{ matrix.target }})
          echo "CARGO_TARGET_${TARGET_UPPERCASE}_LINKER=${TOOLCHAIN}/bin/${{ matrix.target }}${ANDROID_API_LEVEL}-clang" >> "$GITHUB_ENV"
      - name: Install dependencies (WASI)
        if: matrix.target == 'wasm32-wasip1'
        run: cargo install --verbose wasmtime-cli
      - name: Install Rust ${{ matrix.toolchain }} toolchain
        if: matrix.disable-coverage == true
        run: |
          rustup toolchain install ${{ matrix.toolchain }} --target ${{ matrix.target }} --profile minimal
          rustup default ${{ matrix.toolchain }}
          rustc +${{ matrix.toolchain }} --version --verbose
      - name: Install Rust ${{ matrix.toolchain }} toolchain, grcov
        if: matrix.disable-coverage != true
        run: |
          rustup toolchain install ${{ matrix.toolchain }} --target ${{ matrix.target }} --profile minimal --component llvm-tools
          rustup default ${{ matrix.toolchain }}
          rustc +${{ matrix.toolchain }} --version --verbose
          cargo install grcov
      - name: Build and test
        run: |
          flags=''
          if [[ ${{ matrix.disable-tests }} == 'true' ]]; then
            flags="$flags --no-run-tests"
          fi
          if [[ ${{ matrix.disable-coverage }} == 'true' ]]; then
            flags="$flags --no-run-coverage --output-dir ./coverage"
          fi
          # shellcheck disable=SC2086
          ci/build_and_test.sh --target ${{ matrix.target }} $flags --output-dir ./coverage

          if [[ ${{ matrix.disable-coverage }} == 'true' ]]; then
            ls coverage
            cat coverage/lcov.info
          fi
      - name: Upload code coverage results
        if: matrix.disable-coverage != true
        uses: coverallsapp/github-action@648a8eb78e6d50909eff900e4ec85cab4524a45b # v2.3.6
        with:
          file: coverage/lcov.info
          format: lcov
          flag-name: ${{ matrix.target }}
          parallel: true

  finish_coverage:
    needs: build_and_test
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@648a8eb78e6d50909eff900e4ec85cab4524a45b # v2.3.6
      with:
        parallel-finished: true
        carryforward: aarch64-apple-darwin,aarch64-pc-windows-msvc,aarch64-unknown-linux-gnu,i686-pc-windows-msvc,i686-unknown-linux-gnu,x86_64-pc-windows-msvc,x86_64-unknown-linux-gnu,aarch64-unknown-linux-musl,x86_64-unknown-linux-musl,x86_64-apple-darwin

  static_checks:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Unix
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          # MacOS
          - os: macos-latest
            target: x86_64-apple-darwin

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc

          # WASI
          - os: ubuntu-latest
            target: wasm32-wasip1

    runs-on: ${{ matrix.os }}

    permissions:
      pull-requests: write
      checks: write

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false
      - name: Setup cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1
        with:
          prefix-key: rust-nightly
      - name: Install Rust nightly with clippy and rustfmt
        run: |
          rustup toolchain install nightly --target ${{ matrix.target }} --component rustfmt --component clippy --profile minimal --allow-downgrade
          rustup default nightly
          rustc +nightly --version --verbose
      - name: Format
        run: cargo fmt --check --all
      - name: Set up cargo-action-fmt
        if: github.event_name == 'pull_request' && matrix.target == 'x86_64-unknown-linux-gnu'
        uses: olix0r/cargo-action-fmt/setup@9269f3aa1ff01775d95efc97037e2cbdb41d9684 # v2
      - name: Check (Linux, MacOS, Windows)
        if: matrix.target != 'wasm32-wasip1'
        run: cargo check --verbose --all-features --all-targets --workspace --target ${{ matrix.target }}
      - name: Check (WASI)
        if: matrix.target == 'wasm32-wasip1'
        run: cargo check --verbose --all-features --all-targets --target ${{ matrix.target }}
      - name: Clippy (Linux, MacOS, Windows)
        if: matrix.target != 'wasm32-wasip1'
        run: cargo clippy --all-features --all-targets --workspace --target ${{ matrix.target }}
      - name: Clippy (WASI)
        if: matrix.target == 'wasm32-wasip1'
        run: cargo clippy --all-features --all-targets --target ${{ matrix.target }}
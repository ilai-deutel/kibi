name: CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

jobs:
  build_and_test:
    strategy:
      matrix:
        toolchain:
          - stable
          - "1.85" # MSRV
          - nightly
        target:
          # Tier 1 platforms
          - aarch64-apple-darwin       # ARM64 macOS (11.0+, Big Sur+)
          - aarch64-pc-windows-msvc    # ARM64 Windows MSVC
          - aarch64-unknown-linux-gnu  # ARM64 Linux (kernel 4.1+, glibc 2.17+)
          - i686-pc-windows-msvc       # 32-bit MSVC (Windows 10+, Windows Server 2016+, Pentium 4) 1 2
          - i686-unknown-linux-gnu     # 32-bit Linux (kernel 3.2+, glibc 2.17+, Pentium 4) 1
          - x86_64-pc-windows-gnu      # 64-bit MinGW (Windows 10+, Windows Server 2016+)
          - x86_64-pc-windows-msvc     # 64-bit MSVC (Windows 10+, Windows Server 2016+)
          - x86_64-unknown-linux-gnu   # 64-bit Linux (kernel 3.2+, glibc 2.17+)
          # Tier 2 platforms
          - x86_64-unknown-linux-musl  # 64-bit Linux with musl 1.2.3
          - x86_64-apple-darwin        # 64-bit macOS (10.12+, Sierra+)
          - wasm32-wasip1              # WebAssembly with WASIp1
        include:
          # MacOS
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin

          # Windows
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: windows-latest
            target: x86_64-pc-windows-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc

          # Default: ubuntu-latest

    runs-on: ${{ matrix.os || 'ubuntu-latest' }}

    permissions:
      contents: read

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false
      - name: Install gcc-multilib (i686)
        if: matrix.target == 'i686-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install gcc-multilib
      - name: Install Rust ${{ matrix.toolchain }} toolchain
        run: |
          rustup toolchain install ${{ matrix.toolchain }} --target ${{ matrix.target }} --profile minimal
          rustup default ${{ matrix.toolchain }}
          rustc +${{ matrix.toolchain }} --version --verbose
      - name: Setup cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1
        with:
          prefix-key: rust-${{ matrix.toolchain }}
      - name: Build
        run: cargo build
        env:
          RUSTFLAGS: -D warnings -C instrument-coverage
      - name: Run tests
        run: cargo test --verbose --all-features --no-fail-fast
        env:
          LLVM_PROFILE_FILE: kibi-%p-%m.profraw
      - name: Collect code coverage results
        run: |
          cargo install grcov --no-default-features
          grcov . --binary-path ./target/debug/ --source-dir . --output-types lcov --branch --output-path lcov.info --keep-only 'src/*'
      - name: Upload code coverage results
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          files: lcov.info
          flags: ${{ matrix.target }}-${{ matrix.toolchain }}
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  static_checks:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Unix
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          # MacOS
          - os: macos-latest
            target: x86_64-apple-darwin

          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc

          # WASI
          - os: ubuntu-latest
            target: wasm32-wasip1

    runs-on: ${{ matrix.os }}

    permissions:
      pull-requests: write
      checks: write

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false
      - name: Install Rust nightly with clippy and rustfmt
        run: |
          rustup toolchain install nightly --target ${{ matrix.target }} --component rustfmt --component clippy --profile minimal --allow-downgrade
          rustup default nightly
          rustc +nightly --version --verbose
      - name: Setup cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1
        with:
          prefix-key: rust-nightly
      - name: Format
        run: cargo fmt --check --all
      - name: Set up cargo-action-fmt
        if: github.event_name == 'pull_request' && matrix.target == 'x86_64-unknown-linux-gnu'
        uses: olix0r/cargo-action-fmt/setup@9269f3aa1ff01775d95efc97037e2cbdb41d9684 # v2
      - name: Check (Linux, MacOS, Windows)
        if: matrix.target != 'wasm32-wasip1'
        run: cargo check --verbose --all-features --all-targets --workspace --target ${{ matrix.target }}
      - name: Check (WASI)
        if: matrix.target == 'wasm32-wasip1'
        run: cargo check --verbose --all-features --all-targets --target ${{ matrix.target }}
      - name: Clippy (Linux, MacOS, Windows)
        if: matrix.target != 'wasm32-wasip1'
        run: cargo clippy --all-features --all-targets --workspace --target ${{ matrix.target }}
      - name: Clippy (WASI)
        if: matrix.target == 'wasm32-wasip1'
        run: cargo clippy --all-features --all-targets --target ${{ matrix.target }}